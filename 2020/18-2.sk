class Expr
  def evaluate -> Int; panic("abstract"); end
end

class BinOp : Expr
  def initialize(@op: String, @left: Expr, @right: Expr); end
  def evaluate -> Int
    if @op == "*"
      @left.evaluate * @right.evaluate
    else
      @left.evaluate + @right.evaluate
    end
  end
  def to_s -> String
    "(#{@left}#{@op}#{@right})"
  end
end

class Num : Expr
  def initialize(@n: Int); end
  def evaluate -> Int
    @n
  end
  def to_s -> String
    @n.to_s
  end
end

class Parser
  def initialize(s: String)
    @s = s.split(" ").join("")
    var @cur = 0
    d @s
  end
  
  def parse -> Expr
    _parse_expr
  end

  def _parse_expr -> Expr
    _parse_binop_expr
  end

  def _parse_binop_expr -> Expr
    d "_parse_binop_expr"
    left = _parse_additive_expr
    if _current_char == "*"
      @cur += 1
      right = _parse_expr
      BinOp.new("*", left, right)
    else
      left
    end
  end

  def _parse_additive_expr -> Expr
    d "_parse_additive_expr"
    left = _parse_primary_expr
    if _current_char == "+"
      @cur += 1
      right_ = _parse_additive_expr
      BinOp.new("+", left, right_)
    else
      left
    end
  end

  def _parse_primary_expr -> Expr
    d "_parse_primary_expr"
    if _current_char == "("
      @cur += 1
      e = _parse_expr
      panic("missing ')'") if _current_char != ")"
      @cur += 1
      e
    else
      n = _current_char.to_i
      @cur += 1
      Num.new(n)
    end
  end

  def _current_char -> String
    if @cur >= @s.bytesize
      ""
    else
      @s.slice_bytes(@cur, 1)
    end
  end

  def d(name: String)
    #puts "#{_current_char} #{@cur} #{name}"
  end
end

class Day18
  def initialize(s: String)
    @lines = s.lines
  end

  def solve -> Int
    var ans = 0
    @lines.each do |l: String|
      ans += _calc(l)
    end
    ans
  end

  def _calc(l: String) -> Int
    expr = Parser.new(l).parse
    p expr
    expr.evaluate
  end
end

s="2 + (2 + 6 * (4 * 5 * 8 * 7) + 3) * (9 + (4 * 3 * 7 * 9)) * 7
7 * ((9 + 3 + 2 * 8 + 8 + 6) * 5 * 7 * 4 * 9 * 4) + (2 + 9 * (7 * 8 * 2 + 9 + 7) + 8 + (4 + 9 * 7) * 3) * 4 + 9 * (4 * 8 * 4)
9 * 2 + (9 * 7 * 4 + 4 * 6 + (8 + 9 + 3 * 3))
(2 * (2 + 4 * 7 + 8) * 5 * 7) * 6 + 4 + 4
9 + 7 * (2 * (3 * 3 + 9 + 8 * 4) + 8 * 9) * 6 * 9 + 8
7 + (9 + 4 * 5 * 4 + 6 + (8 + 7 + 4 + 7 + 6)) + (3 * 7 * 8 * 2) * 3 * 3 + 5
7 * 2 + (2 + 5 + 4 * 5) + (4 * 2 * 5 * (5 * 2 * 6 * 9)) * (7 + 6 + 5 + (4 * 2 + 4 + 6 + 6) + 9 + 2)
((4 * 4 + 4) + 3 * 2) * 3 * 8 + 7 + 8 + 6
(4 + 8 + 5 + 3 + (8 + 8 + 4)) * 5 + 5 * (9 * 8 * 2 + (4 * 3)) + 7
2 * 7 + 8 * 3 + 8
8 + 7 * ((4 + 4 + 3 * 8 + 3) * 7 * 6 * 6 * 2)
4 + 2 + (6 * 4) * 5 + 7 * 9
8 * 6 + 9 * (8 + 4) + 3
9 + 2 + 2 + ((4 + 4 * 8 + 6 * 6 * 5) * 8 * 2) * 9 * (6 + 3)
(2 * 7 + 7 + 9 + 3) * (3 + 8 + 7) + 4 * (9 + 9 + (2 + 2 + 3 * 5 * 5 * 3) * (6 * 2) + 9) * 3
(2 + 4 * 6 * (5 * 8) * 2) * 3 * 3 + 3 * 3
(5 + 4 * (3 * 2 * 9 * 4 + 9) * 4) * 5
2 * (4 + (7 * 9 * 9) + 8 * (8 * 4 + 5 + 2) + 4) + 7 + (5 * 5 + 7 + (4 * 8 * 5 * 2 * 2)) * (4 + 5 + 4 + 8 + 6) + 4
4 * 2 * ((6 * 2 * 5) * 8 * (5 + 8 * 7))
9 * (7 + 2 + 7 * 3) * 6 * 3
6 * 6 * 8 + 6
2 * 2 + 8 + 3 * (6 + 3 + (9 + 2 * 3 * 5 * 4 * 2) * 7)
((8 * 9) + 6 + (2 + 7 * 9 + 8 + 3 * 8) * 8) + 6 + 6 * (9 * (5 + 7 + 3 + 8 + 8 * 3) + (2 + 4 + 2 + 5) + (2 * 8 * 8 * 9 * 4 * 4) + 3 * 2) + (5 * 7 + 3)
4 + 6 * 7 * 7 * (9 * (2 + 8) + 3 + 4 * 2 * (2 * 8 + 9 * 9))
(5 + 3) * (5 * (4 * 4) + (7 * 7 + 7 * 5 + 6) + 3 * (8 + 7 + 4 * 8 + 8 + 5) + 5) * 8 * 9
(7 * 8 * 3 * 4 + 7 * 3) + 9 * 2 + 7 * (8 * 2 + 8 * 2)
7 + 5 + 4 + (9 + 7 * 9 * 4) + 2 * 6
((3 * 5 + 4) + 3 * 4) + 2 * 3
8 + (5 * 5 + (2 + 4) + 3 + (5 + 9 + 4) * 6) + ((5 * 7 + 4 + 8 * 2) + 3 * 4) + 5 * (7 * (7 + 2) * (5 + 5) + 5 * (6 * 4 + 8) * (3 * 6 + 5 * 2 * 2 * 3)) + 6
4 * (7 * 2 * 2 + 7 + 3 + (7 * 4 + 4 + 4)) + 4 + 8 * 5 * 4
6 + 3 * 7 * ((5 + 9 + 3 * 2 + 5) + (8 * 8 * 4 * 4 * 7 * 2))
8 + 5 * 8 * 4 * (6 * 5 + 3 * (6 * 3 * 7) * 6)
((7 * 5) * (3 * 3 * 5 * 8 + 8) + 4 * (6 * 8 * 6) * 9) + 8 * 7 + 9 * 6
(2 * 5 * 3 * 3 + 6) + (8 * 4 + (2 + 3 * 8) * 6) + 2 + 5
(5 + 2 * 6 * 7 * 3 * 7) + (7 + (3 + 2))
6 + (8 + 7 + 5 + (2 * 5 + 4 + 5 * 7 * 3) * 7) * 7 * 5
4 + 4 + 4 * 6 * 2 * 5
4 + (3 * (3 * 2 * 5 * 8 * 3)) + 5 * 9
8 + 6 + (2 + 2 * 7 + 3)
5 * 6 * 5 + 5
(7 * 2 * 8 * 6 + 7) * 9 + 9
5 + 3 + (5 * (7 * 5)) * (7 + 2 * 3 + (3 * 6 + 3) * 3) + 6 + 4
(5 + (9 + 5 + 7 + 3 + 9 * 8) + 4 + 5 * 9) * 4 * 5
4 + ((9 * 6 + 8) * 6 * (8 + 9 + 3) * 8) * 9
2 + (9 + (9 * 9 + 3 * 3)) + 3 + 6
4 * ((8 + 6 * 5 + 5) * 3 + 2 + 2) * ((9 * 9) * 5)
8 * ((2 + 6 * 3) * (8 * 2) + 8 + 8) + 8 + (5 + 5 + 2)
8 * (4 * (5 + 9 + 3 + 3 * 2) + 7 + 5 * 5)
9 + 4 + 4 * 7 * (2 + 4)
6 + 4 * (8 + 4 + (5 + 7 + 6 + 4 * 7)) * 6 * (8 * (7 + 7 + 6 * 2) + 4 * 4 + 3) * (4 + (8 + 5 + 6) * 9 * 8 * 4)
7 * (2 * 4 * (7 + 5 + 8 + 2) * 8) * 2
((7 + 4 * 8) * 9) + (6 * (7 * 6) + 9 * 9) * 7 + 2 * 8 + 2
(8 * 4 * 6 + (7 * 3 + 2 * 7) + (6 + 2 + 7 * 9 * 6 + 2)) + 9 * 6 + (2 * 5 + (7 * 2) * 8 * 2) + 9 + 9
(3 + (7 * 3 + 3 * 5 + 6 * 6)) * 3
8 + 2 * 7 * 3 * (3 * 5 + 4 + 8)
(9 * (9 * 2 + 7 + 6 * 6)) * 2 * 2 + 9 + ((9 + 7 * 7 + 4 + 6) * 5 + 9 + 3 * 8 + 6)
5 * 7 + 5 * (3 + 3 * 3 * 6 * 4 * 2) * (3 * 3 + 2 + 4 * 7 + 3) + 9
7 + (3 + 7 + 4 * 3 * 3 * (4 + 9 + 4)) + 3
6 * 8 * 7 * ((2 * 7 * 2 + 7 + 7 * 2) * (4 * 9 + 3 * 7 * 7)) * 9 * 3
5 * 5 + 8 * 5
(4 + 6 * 9 * 4 + 9) * 5 * 3 + 2 * 7 + (6 * 9)
(2 + 9 + 3 * 7) * 8
4 * ((3 * 8 + 3 + 9 * 9) * 9 * 3 * 6 * 7 * 3) + (8 + 7)
2 * (2 + 4 + 9 * 4 + 9) * 6 + 5
5 + 9 + 7 + (2 + (2 * 5 * 6 + 5 * 2)) + (9 * 3 * 7)
5 + 4 * (7 + 7) + (2 * 5)
5 * 5 + 3 * (7 + 5 * (8 + 8 + 2 * 4 * 9 * 6) + 6)
4 + (7 * (6 * 5) * 9 * 4 + (6 + 6 * 7 + 2)) + 9 * 2
(6 * 7 + (8 * 7 + 2 * 2 * 8 * 9) + 8 + 8) + 6 * 8 * (9 + 6 + (4 + 4 + 6 * 2) * 9 * 8 + 4)
(4 + 9 * 3) * 3
5 + ((3 * 9 + 2 + 7 * 4) + (8 * 7) * 6) * 2 * (2 + 8 * 7 * 8) + 3
7 * 4
(4 * 6 * (3 * 3 + 2) * 3 + 2) + 2
4 * 6 + (3 * 7 * 4 * 4) + 3 * 8 + 2
2 + 6 + ((4 + 7 * 6) * (5 + 4 + 7 + 8 + 8) + 4) + 2 * (4 + 3 + 6 + 7 + (9 * 4 * 7 * 3 + 3) + 3)
9 * 7 * (8 * 6 * 2 * 7) + (3 * 5) + 6 + 3
7 * 4 * 3 + 2 + (7 + 5 + 5 * (5 + 6 * 2 * 6) + (2 + 8) * 9) + 2
(6 * 7 * 8) + (7 + 9 * 6 * 2 * 9 * 2) * (3 * 5 * 6 + 9 * 4) * 5 + 4
((6 + 9 * 8 + 3) + 5 + 4) + (3 * 5 + (2 * 9)) * 8 + 8 + 5
(7 + 5 + 7) * 6 * (6 + 6) * (3 + 9 + 8 * (6 + 3 * 7 * 9) + 2) * ((8 + 7 + 7) * 8 + 6) + 3
3 * 5 * 8 * 9
(7 + 2 * 7 + 9 * (6 * 6 * 2 + 9 * 3 + 3)) * 3 * (4 + 8 + 2 + 7 + 9 * 7) + (7 + 5 * 4 * 3 + 8) * 7
8 + 3 + 7 + 3 * (7 * 5 * 4 * 3 + 7 * (9 * 5 + 4))
5 + 4 + 9 + 8 + 4 * ((5 * 8 + 5 + 4) * 5)
(2 + 4 + 3) * 2 * (8 * (3 * 7 * 5 + 7 + 3) + 7 * (7 * 2 * 7 * 2 + 8 + 9))
6 * (3 * 7 * 5 * 5)
2 * (5 + 6 * 3 * 7 + 4) + 8 + 7 + (4 + 5 * (3 * 8 + 4 + 5)) * 8
9 + (8 + (9 * 6 * 5 + 8 + 3 + 8) + 2) + (2 + (3 + 8 + 7 * 4 * 9 * 5) + (8 + 7 * 8 + 3) * 8 * 7 + 5) * (2 + (9 * 2 + 5 + 5 + 6 + 9)) + 7
6 * (7 * 8 + 6) * 3 + ((7 * 8 + 3 * 9) * 5 + 5 + (5 + 5 * 3 * 5 * 4 * 6) * 9)
7 + (8 * 7 + (9 + 4 * 4 * 8 * 4)) * (3 + 5 + (3 * 4 * 3) + 3 + 7 * 8)
7 + (4 + 9 * 5) * 9 * 9 * 4
6 * (7 + 5 + (9 + 7 * 9 + 5))
2 * 9
7 * (4 + (9 + 6 * 4 * 7 * 6 + 3) * 3 * 2) + 6 * 2 + 6
(3 + 2 * 6) * 6 * (7 * 7 + 7 * 4 * 7) + 3 * 6 + 7
2 + 9 + 7 + 4 + (5 + 5 + 2 * (8 * 9 * 3 + 9 + 8) * 2)
((5 + 6 * 5 + 5 + 7 + 2) * (8 * 5 * 3 * 3 * 6) * 9 * 8) * 3 * 8 * (9 * 5 * 8 * 4 + 6)
(8 * (9 + 2 + 2 * 6) * (9 * 9 + 4 + 8) + 7 * 9 + 6) + 7 + 2 + 6 * 7 + 5
2 + 5 * ((2 + 9 + 6 * 7 * 6 + 8) * 9 * 8 + 9 + 9 * 8) * 4
8 + ((3 * 2) + (4 * 3 + 4 + 7 * 4 * 9)) + 5 * 4 + 3 * 9
5 * 8 + ((9 + 5) + 5 + 8) * 5 + ((3 + 2) + 8 * 3) + 5
4 + 3 + ((9 * 4 * 7 * 2 + 9) + 7 * (6 + 6 + 4 * 7) * 2 * 6) * 9 * 3
7 * 6 + 3 * (6 * (3 * 4 + 7 + 7) * 2 * (3 * 7 * 2) + (7 + 3 + 5 + 6 * 4)) + 8
3 + ((7 * 7 + 7 + 9) * 5 * 3 + 6 * 9) * 2 + (6 * 6 + 2 * 7)
3 * ((3 + 9 + 5 + 5 * 5) * 3 + 3) * 7 + 3 + 3 + 5
8 + (4 + 7 + (7 * 2 + 3 + 6 * 6 + 7))
2 * (8 + 2 * 4 * 6 * 3) + 4
8 * (8 * 8 + (9 + 5))
(5 * 3 + 6 * 5 * 7 + 4) * 4 + 9
9 + ((5 * 4 + 9 * 6 + 5) * 4 + 7 + 2) * (4 + 5 * 8 * 6 + 3) + 7
(4 * 9 + 4 + 6 * 4 + 7) + 8 + 8 + 2
7 + (8 * 6 + 4 + 5 + 9) * 7 + 6 * 3 * 4
(3 + 5) + 3 * 5 + 3
8 + 2 * 4 + 7 * (8 + 8 * 9)
7 * (2 * (6 + 9) * 8 + (5 * 5 + 8 + 6 + 6) + 6) * 4 * 4
(3 + 6 * 8 + 5 * 2 * 9) + 3
((9 * 7 + 9 + 3 * 7) * 3 + 6 * 6) * (5 + 5 * 3 + (7 + 8 * 3 + 7 + 4 * 7)) + 7 + 8 + (4 + (2 * 6 * 2 * 6) * 8)
6 * ((3 + 7 * 6 + 7 * 5) * 6 * 3 * 7 + 6 * 2) + 8 * 7
7 + 3 + (8 + 9 * 8 + 9 + 3 * (6 * 7)) + 4 * (6 * 7 + 7 * (6 + 9) + 6 + 2)
5 * 3 * (2 * 6) * (9 + (2 * 2) + 6)
4 * 8 * 4 + 7 + 7
3 + 8 * ((5 * 4 * 7 * 9) * 9 + (6 * 6 * 5 + 7)) * 9 * 4 * (4 + 6 * (4 * 7 + 6 + 2))
(9 * 3 + 2 + 3 + 2 * 8) * 2 + 5 + 2 * 9
3 + 7 + 7 + (9 * 7 * 3 * 8) + 3
2 + 3 + (8 * 4) * 7 * 4
(9 + 8) + 8 * 8 + 6 + 3
(9 + 5) * (2 * 5 + 3 * 7)
9 + (8 + 3 * 4) * 5 * ((7 * 6 * 4 * 6) * 2 * 4 + 3 * 5)
(7 + 5 * 6 * 7 + 4 + 2) + 8 * (8 * 3) + (6 * (9 * 3 * 7 + 7)) * 7
7 * 2 + (7 + (2 * 6 + 9 + 9 + 5 + 2) + (4 * 5 + 4 + 3 * 7) + 8) * 8
(6 * 4 + 6 + (5 + 6 * 4) * 2 + 5) * (3 + 2) + (8 + (8 * 7 * 9 + 5) * 5 * 6) + 8 + 5 + 7
5 + 4 * 4 + 3 + 8 * (2 * 4 + 5 * 3)
4 * 3 + 6 + 6 * (4 + 9 * (4 * 9)) * 6
7 + ((3 + 5 + 8) + 9 + 8 + 6 * 9 + (9 + 5 + 7))
(6 + 7 + 7) * 9 + 6 + 7
8 + (2 + 6 * (4 * 8 * 3 * 2 + 9 + 8) * 8 + (9 + 5)) * 5
6 + 5 * 5 * (6 + 9 + 3) * (5 + 9 + 6)
((8 * 8 + 5) * 6) * 7
8 + (4 + 6) + (4 + 6) + (8 * 4 * (6 + 6) * 8 * 6) * 6 + 2
9 * (6 + 7)
(6 + 3 + 6 * 8 + (4 + 8 + 3)) * 4
6 + (6 + 4 + 7 * 9 + 4 * 6) * 3 * 3 * 8 * 6
7 * (6 + 5) * 7 + 7 + ((3 * 3) + (9 * 8 + 6) + 4)
6 + (3 + 2) * (5 * (2 * 7 * 6) * 2 * (2 * 8 + 7)) + 7 + (5 + (5 + 8 * 4 + 8) * 2 + 3 + 9 * 7)
9 + 8 + 6 + (6 + 8 + (9 + 9 + 9 * 6 * 7 * 7)) * 7 * 5
9 + 5 * (2 + 6) * (8 * 2 * 8)
(3 * 3 + 2 + 6 + 5) + 4 * 3 * (9 + 9) * 7
(6 * 8 + 9 + 2 + 7) + 5 * (9 + 4 * 9 * 9 + 8 * 2)
4 + (5 * 4) * 5 * 5 + 4
8 * ((2 + 2 * 2 + 8 + 6) * 7 + 5 * 6 * 8 + (7 * 6 + 7 + 4 * 8 + 4)) + 8 + 5
8 + (2 + 8 * 3) * (5 + (3 * 6) * 3 * 3 * 7) + (7 * 4 + 7 + 9 * (7 * 6)) + 2 + 5
((7 * 7 * 4 * 4) + 5 + (2 + 5 * 3 * 7 + 6) + 4 + 5 + (5 * 4 + 5 * 4 + 6)) + 3 + 8 + 2 * 5
2 * (2 + (8 * 3 * 9 * 6) * 7 + 9) + 8 * 3
((6 + 6 + 5 + 6 * 5) + (6 + 7) + 2) * 6 * 4 + 6 + 2
3 + 9 + 6 + (3 * 7) + 8 * 2
5 * (8 + 4) + (7 + 3 + 8) + 9 + 3 * ((8 * 7 * 4) * 4 * 5 + 8 * 7 * 2)
2 * 9 + ((7 + 9) + 7 + (2 + 3) * 2 + 2 + 7) * (7 * 8 * 4 * 8) * 7
(6 * (5 * 4) + 6 + 3 + 9) + ((4 + 9 * 5 + 3 + 7) + 5) + (6 * 2 * 9 + 2 + (6 + 2 + 2 + 2) + 7) + 7 * (7 * 4) + 2
((7 + 4 * 7 * 8) * 9 + 6) + ((9 + 7 + 6 + 2 * 9) * (4 * 9 * 6 * 3 + 8) * 6 + (9 * 6 * 5) + 7 * (6 * 7 * 8 * 5 * 7))
8 + (8 * (9 + 9 * 6 * 9 * 3) * 2) + 2 * 4
6 + (6 * 5 * 8 + 4 + (6 * 8 + 5)) + ((7 * 9 * 5 * 7) + 6) * 6 * 3 + 4
9 * 4 * 4 + (8 + 2 + 2)
(9 * 6) * 8
8 + 5 + 9 * 3 + 4
((8 + 5 + 7 * 5) + 5 * (2 * 5 + 2 + 5) * 3 * 4) + 9 + 8
(5 * 6 * 5 * 6 + 9) * 8 * 8 + 2 * 8
4 * (2 + 6 + 4) + 6
(9 + 9) * (2 + 2 * (8 + 3) + 9 * 6) + 4 * 4
2 * (8 * (9 * 9 * 2 * 5) * (3 + 8 * 2 * 8) + 2 * 9) * 3
(8 * 3 + (3 * 5 + 8 + 4) * 3) * 2 + 9 + 5
3 * (5 * 4 * 4) + 2 + 8
(8 + (7 * 4 * 9 * 6 * 2 * 7) + 6 * 7 * 2) * 7
(7 * 4) + 3 * 7 * 7 * 7 + 3
(3 + 3) * 5 + 7 * (2 * 8 * 6 * 9 * 9 + 8) * 6
9 * 6 * (5 + (3 + 8 * 5) + (2 * 2)) + 6 * ((8 * 2 * 4 + 7) + 7)
(8 + (8 + 2 + 3 + 9) + (8 + 8 * 9 + 4 * 8) * 9) * (3 + 3 + 9 * 6 + 4 * 2) + 4 * (6 + 7 + 9 * 3)
7 * 6 * 6 * (7 * (4 * 4 * 8) + 9 + 8 + 4 + 7)
(8 + 9 + 9) * 2 + 4
(9 * 7 + 3 * 9 * 8 * 3) + 8 + 5 * 8 * 8 * 9
8 + (6 * 2 * 8 + 9 * 2)
7 * ((3 + 3 + 6 * 8) + (9 * 5 * 9 + 3) + 6 * (4 + 6 * 3 + 4 + 3 + 8) * (2 + 2 * 9 + 4) + 8)
2 * 5 * 8 * 5 + 8 * (9 + 6 + (3 + 5 * 2) + (4 + 4 * 6 * 9 + 5))
3 + ((3 + 5 + 4) + 9 + 9 + 4)
((2 * 4) * 2 * 9 + 9) * 9
(7 + 3) * 2 * (6 + 9 * 4 * 6) * 5 * 3
6 * ((3 * 6) + 5 + (2 * 8) * 8 + 3 * 6)
4 * 4 * (7 * 9 + 4 + 9 * 6 + 7) * 9
((8 + 6 * 3 + 5) * 3 + 3 * 8 + (4 * 8 * 3 + 4 * 8)) * 8
8 * (5 * 3 * 3 + 3 * 4) * (7 * 5 * 4) * 3 + 9
(8 + 7 + 3 * 2 + 9 * (8 * 9 * 9 * 6 + 7)) + 2
9 * (2 + 3 + 2 * 6 * (6 * 6 + 8) * 2) + 3 + 7 * 7 * 9
(2 * 8 * 3 * 9 + 7) * 5
4 + 5 + 9 + 5 + 5 + 9
2 + (3 + 4) + 4 + 8 + 3 + (4 * (7 + 3 + 7 + 9 * 3))
2 * (8 + 2) + 6 * 7 * 2 * (7 + 7 + 5)
5 * 2 + (8 * 8 * 2 + 8 * 6 + 5) * 3 * 5
6 + 9 + (6 * 6)
7 + 6
7 * (3 * 7 * 7 + (7 * 8 + 8 * 7 * 7) * 7) * 3
3 * 8 + 5 + ((6 + 9 + 2 + 8 * 9 + 3) + (5 * 8) * 2 * 6 + 8 * (7 + 7 + 2 + 6 + 7)) + (3 * 7)
(2 + 2 + (7 + 8 + 3 * 7 * 2) + 7 * 6 + (5 * 8 + 8)) + 9 + (9 + 7 + 6 + (3 + 8 + 7 + 5 + 9 * 5))
((9 * 6 * 9 * 5 + 3) + 8 * 5 + 7 * 9 * (3 * 4 * 7)) * 4 + 7 + 8 * 9 * (7 * 6 * 3)
(3 * 9) * ((4 + 6) * 8 + 2 * (2 + 2 * 4) + (8 + 2 + 7 * 7 * 2 + 8))
((9 + 5 * 5 * 2) + 8 + 5 + 8 + (6 * 5 + 9 + 5)) * 7 * 6 + 4 + ((4 * 7 * 3 + 9 * 5 * 2) * 3 * 7 + 4 + 9 + 9)
4 + 4 * 5 * (9 * 9 + (9 + 8 * 5 * 8 + 5) + 6) * 7
6 * 8 * 4
3 + 8 * ((6 + 5 + 8) * 9) * 9 * (6 + 8 * 9 + 7 + 8) * (5 * (6 * 2 + 9 + 6 * 6 * 7) * 6 * 2)
9 + 4 + 6 + (2 * 9 * 8 + (7 + 3 + 6 + 3)) + 5
5 + (8 * (2 * 6 * 9) + 8 * (4 * 6) + (7 + 2 * 3 + 2 * 6 * 4) * 3) + 9 + 3 * 2 + 3
6 * 7 + 3 * (8 * 9 + 7 + 4 + 4 + (4 + 8 * 7 + 4 * 4)) + (2 + (3 + 9 * 2) * 6)
4 * 2 * (3 + 4) * 7 + ((9 + 9 * 3) + 4 * 6 + 8 + 8)
4 + 2 + ((7 * 7 + 5 * 2 * 3) * 9 * 5 * (9 + 5 * 5 * 8 * 6 + 3)) * (6 * 4 * 9 + 3) + 3 * 7
5 + (7 * 5 * 4 + 3) * 9 + (7 * 6 * 9 + 6 + 6 * (5 * 4 * 7 * 5 * 2 + 3)) + 5
(4 * 9) + 9 + 4
((2 + 4 + 5 * 4 * 3 * 5) + 6 * 2 + 7 + 7 + (4 * 9 + 2 * 7 * 7 + 2)) * 4 + 8 * 7
6 * 6 + 4 * (2 * 8 * 9 * 2 + (9 * 2 + 5 + 2 * 9 * 6)) * (2 + 9 + 8 * 6 + (5 * 8 * 5) * 5) + 7
7 * 8 * 8 + (5 * 9 * 3 * 2 * 9 * 6) * 4
((2 + 9 + 4 + 7 * 3 * 5) * 7) + 9 * 4 * 8 * 5 * 5
(8 * 4 * 7 * 6) + 7 * 9 * (7 * (3 * 9 * 4 * 6 + 8)) * 2
8 * 7 * 3 + (2 + 9 * 5 + 8 * 3 * 4)
9 + 7 + 8 + 5 * (6 * 3 * 2 + (8 + 3 * 6 + 9) + 6)
(8 + 2 * (3 * 4 * 2) + 7 * 7) + (6 * 5 * (4 + 8 * 5 + 7 + 8 * 3) * 6 + 8 * 9)
2 * (4 + 8 + 3 * 2 * 7 * 4)
9 + 7 * (9 + 8 * 5 + (2 * 5) * (5 * 6 + 3 * 5 * 7 + 3) * 7) * (4 * (3 + 6 * 5 + 8 * 4 * 9) * 8) * 4 + 2
8 * 5 * 3 + 2 * (7 * 6 + (9 * 6 + 4) * 4 * 5) + 6
2 * 3 * 6
6 + (6 + 4 + 4 + 8) * (7 + 6 + 3 + 2) * 2
7 * (3 * 3 * 5 * 8) * (3 + 8 * 4)
((7 + 8 + 9) * 7 + (4 * 3 * 8 * 2 * 5 + 8)) + 7
8 * (2 * 4 + (5 + 5 * 9 + 9 + 7) + 5 * 5) + 4 * (8 * 2)
3 + 2 * (5 + 7 * 2) * 5
3 + 5 + 8 * 6 * 4 + ((6 * 8 * 9 + 4) + 9 * (5 * 9 + 6 * 4) + (2 + 3 + 8 * 7 * 7 * 8))
(6 * 8 + 4 * 2 * (2 * 8)) * 3
8 * 5 + 6 * 3 + ((8 * 6 + 6 * 3 * 3) + 3 * 6 + 4) + 4
(9 * 5 * 7 + 8) + 7 * 9
3 + 9 + ((5 * 7 + 9 * 5) + 8) + 6
5 + 4 * 5 + 2 + (8 * 9 * 8 + 5) + (5 * (8 * 6 + 6 * 4 * 2 + 5))
5 + 7 + 3 + (6 * 9 * 8 + (7 * 6 * 8 + 2 * 4)) * 8 * (5 * (7 + 7 + 4 + 6 * 3 * 6) * 4 + 5 + (6 + 9 + 3 * 7 * 4))
(2 + 2 + (9 * 5 * 6) * 9 + 5 * 9) * 6 * 5
7 + ((6 * 4 + 8 + 7 * 9 + 8) * 6 + 8) + 3 * 2 + 3
4 * 5 + (5 + 9 * (7 * 9) * 4 + 8 + 2) * 3
4 * 6 * (9 + 4 * 7 + 7) * ((2 + 6) * 6 * 8) + 7 + 8
9 * 3 * 3 * 6
5 + (2 * (7 * 9 * 2) + 6) + 7 * 4 + (6 * 4)
2 + 2 + (3 * 5 + 5 * 9 + (9 * 2 + 9 + 5) + 7)
8 * (8 + 2 * 2 * 8 * (9 + 5 + 5 + 9 * 4 * 2) * 4) + 2 + (5 + 7 * 6) + 3 * 8
6 + ((3 + 9) * 6 * (6 + 5 + 6 * 5 + 6))
(6 + 9 * 6 + (3 * 3 * 6 * 3) + (4 + 2 + 5 * 4 + 9 * 2) + 7) * 7 + 8
8 * (5 + 4 + 2 * 5 * 4) * 7 + 6 * 7
(6 * 3 + (9 + 4 * 7 * 2 + 7) * 5 + 3 * 8) + 5 * 7 * 8 + (5 + 5 + 4 + 8 + 3 + 4)
7 * 9 + (7 + 9) * (9 * 6 + 5) * 5
9 + (6 * 2 * 9 * 3) * ((7 + 8) * 8 + 3 + 9)
((8 * 2 + 2 + 5 * 9) * (4 * 9 + 2 * 8 * 2) + 6 + 4) * 8 + 9
6 * 9 * (6 * 2 * (7 + 6) + 9 + (9 + 2 + 7 * 2) + 5) + 2
(5 + 9 + 4 + 8 * 4) * ((8 * 6) * (2 + 9) + 4 * 7 + 9 + (6 * 2 + 5 + 3 * 3))
((4 + 6 + 7 * 5 * 3 * 2) * 9 + (8 + 5 + 7 + 9 * 3 * 4)) * 8 + (4 * (7 * 2 * 9 * 6) * 7 * 9 * (6 + 2) + 2) * 3 * 8
4 + (7 + 7 * 4 + 3 + (8 * 5 + 6 * 4 * 8 + 5) + (5 + 8 + 4 + 3 + 2 * 4))
2 * (5 * 3 * 7 * 4 + 8 * 9) + 6 + (7 * 3 * 9 + 5 + 2 + 2)
((8 * 2) + 5 + 9 + (3 * 8) + 5 * 8) * 2 * 9 * 2
(9 * 7 + 4 * 9 * 7) + 5 * 3 + 7
(5 * (5 * 9 + 2) * 5) * 3 * 8 * (3 + 8 + 4 + 7 * 4 * (2 + 2)) * 6 + 8
7 * (3 + 7 * (3 + 9) + 5 * 3 + 9) + 3 + 5
3 + 2 + 6 * (9 * 6 + (2 * 7 + 2 + 2 + 3 * 5) * 5) * 3
9 * ((3 * 8 * 8 + 9) + 4 + 7 * 4)
9 * (9 * (3 + 6 + 7 * 3) + 4) + 3
7 + 6 * 6 * 7 * 4
7 * 9 + 5 + (7 + 7 + 3 * (7 * 9 * 2 * 9 * 8 * 8))
(6 + 5 * 5 + (6 * 5 + 7 + 5 * 4)) * 8 * (7 + 2 * (2 * 7 + 5) * 6 * 6) * 9 + 5
(3 + (7 + 9 * 6 + 7 * 7 * 2) + (5 + 5 * 6 + 6 * 6) * (9 * 4 + 9 + 7)) + 8
3 * (2 * (2 * 4 + 9) * 5 * 7) * 6 * 6 + 2 * 5
5 * 7 + (8 + 3) + 3
8 * 7 * 4 + 6 + (6 + 8 * 8) * 4
3 + ((8 + 2 + 4 + 5 + 5) * 3 + (2 * 9) + 3 + 6) + 6 + 7 + (7 + 3)
(3 * 4 * 8 + (4 + 5 * 2 * 9)) + 9 * 3 * 3 * (6 * 5 * 6) * 9
8 + (8 * 6 * 7 * 7 * 8 * 8) + (3 + 2 + 5 * 2) + 7 * 6
4 + (2 + 9 + 6 + (4 + 6 + 5 + 4 * 7)) + 2 + ((2 * 4 * 5 + 6 + 4) * 5 + 3 + 7)
2 + (6 * 2 + 4)
(8 + 3 * 3 + 9) + 3 + 9 + 8
8 * 9 + 9 * 2 + 2 * (7 * 9 * 5 + 6 * (2 + 8 + 9 + 9 + 5))
(8 + 7 + (5 + 3 + 2 * 2 + 2 * 7)) * 6 * 9 * 4 * 4
3 + 7 + 4 * 3 + ((6 + 9 + 2 + 7 * 2) + (5 * 9 * 4 + 5) + 8 * (3 * 2 * 9) + 5 * 6) + 3
6 + 2 + 3 * (2 + 9 + (6 * 4 * 8) * 2) + 4 + 2
(7 + 6 + (3 + 6 + 3 * 8 * 5) * 9 * 8) + 7
4 * (4 + 7 * 4) + (3 * 6) + (4 * 4 + 2 + 6) * 5
3 * 4 + 7 + 7 * (3 + 5 + 9 + 4 * 9) + ((9 + 5 * 9 * 5 + 9) * (2 * 4) * 7)
8 * 6 * 9 * (8 + 8 + 3 + 3 + 5) * 2 + 2
7 * (4 + 8 * 7 * (9 + 2 + 9 * 2 + 5 * 3) + 8)
6 * 2 + (2 * 8 * (3 + 2 + 6) + (2 * 4 + 7 * 7 * 6 * 8) * 7 * 4) * 6
5 * 5 * (9 * 3 + 4) * (4 * 3 * 5 + 4 * (2 + 2 + 5 + 7 * 2))
6 * 7 + 3 + (7 * 4 + 7 + 8 * 7) * (5 + 8 + 7 * 4 + 4) + (8 * 7 * (5 + 4 * 8))
(6 + (4 * 2 + 4 + 3) * 3 * (2 * 2 + 5 * 4 * 6 * 7)) + 5 + 7 * 4
2 + ((9 + 2) * 3 * 5 + 2) * 4 + 5 * 3
((7 * 2 + 6 + 6) + 2 + (6 + 6 * 5 * 2) + 5) * 5 + 6 * 2
4 + 9 * (4 * (9 + 4) + 4 + 8 + 7 * 9) + 6 * 4 * 4
3 + ((3 + 7) + 9 * 4 + 3 * 4 + 2) + 4
(4 * 9 * 3 * (2 + 3 * 3 + 6 * 7 + 8)) + 5 * 2 + 8 + 4
2 + (7 + (9 + 7 * 4) * 5 * 9)
((5 * 6 * 9 + 4) + 4) * 2 + 2 + 7 * 3 * 3
4 * ((7 * 9 + 6 + 5 + 5) * 3 * 6 + 6 + 2 * 4) + 2
(4 * (3 + 6 + 3 * 8) + (8 * 4 * 5 * 8 * 9 * 6) + 5 + (5 * 4 * 6) + 6) + 3 * 3 + (8 + 3) + 8 + 7
5 + 7 + 2
7 + 6 * (5 * 6 + (8 + 8 * 9 * 7 + 9 + 7))
9 * ((2 * 2 + 2) + 5 * (8 + 6 * 7 + 7 + 9) + 2 * 5)
(6 * (2 * 8 * 9)) + (8 * (9 * 5 + 5) + 9) * (6 + 7) * 7
9 * (9 + 3 * 9 * 9 * 5 * 4) * 9 + 3 * (9 + 8 * 2)
4 + 4 + (7 + 7 * 8 + 9 + (8 * 6) + 3) + 2 + 7
7 + (7 + 7 * 4 + 5 + (5 + 5 + 9 + 6 * 5)) * 8 + (7 * 4 * 5 + 6 * 8) + 3
7 * 4 * 3 + 6 + 4 + 5
((7 + 6 * 7 + 3) * (8 + 2 * 6 + 7 * 8) * 7 + (3 + 6 * 6 * 4)) + ((8 + 9 * 9 + 8) * (4 * 6 * 8 * 2) + 4 + 9 + 4 * 3) * 8
9 + 2
2 * (4 + 4 * 3 + 4 * 7 + 2) * 5 * 7 * 7
8 * (6 * 6 + (9 * 6 + 6 + 3 + 5) + 5 + 3 + 7)
(5 * 9 + 5 + (6 + 5 * 8 * 3 + 5 * 9) * (9 * 9 * 6 * 2 * 4 + 7)) * 7 * 5 * (8 * 5 + (3 * 7 + 4) * 5 + (4 + 3))
(4 + (6 * 5) + 2) + 8 + 2
4 + (8 * 6 + 7 + 7) + ((5 + 6) + 7 + (7 + 4 * 8 + 5 * 2 + 4)) + (5 + 4 + 7 + (9 + 9 + 5 + 6 + 7) + 4) + ((5 * 6 * 5 * 4) + (6 + 9 * 8 * 3 + 8) * 7 + 6 + (9 + 8)) * ((5 + 3 * 7 * 2) + 8 + 4 * 6)
9 + 5 + 4
(8 * 4 * (3 + 5 + 6 + 8 + 3)) * 9 + 3
6 * 7 * 6 + 4 + (9 * (9 * 9 + 8 + 9 * 6 * 7) * 9 * 6 * 5 * 3) + 8
4 + (3 * (2 * 6 + 2) * 9 + 2) + 6 + 5
9 * 9 * (7 + (2 * 5 + 5 * 9 * 2 * 3) * 8 + (3 * 9 + 7 + 5) * 9 * 9) + 2
4 + (9 * (8 * 3 + 3)) * 4 * 8
2 + 3 + 9 * ((7 * 5) * 7 * 2 * 6) * 4
(7 + (7 + 6 + 3 + 7 * 4 + 4) + 8) + 7 + 8 * 9 * 7 * 7
(8 * 8 * 3 * 2) * (8 + 9 + 8 + 3 + 7) + 7 * 9 * 7 * 3
((2 * 2 + 4 + 3) * (9 * 3) * 5 * 5) * 2 * 5
4 + 8 * 7 * 2 + ((3 * 2 + 4) + (4 * 5 * 4) * (6 + 3))
9 + (6 + 8 + 6 + 9) * 9 * (8 + 9 + (6 + 5 + 8) * 6 * 2 + 7) + (9 + 8 * 9)
2 + (8 + 3 * 6 + 4 * 3 * 4) * 4 * (6 * 3 + 8 + 9)
2 * (6 + 9) * 7 + 9
((3 * 9) + 4 + 6 + 4) * 8 + 7 * (5 * 5 + 4 + (6 + 7 + 6 + 3 + 4 * 2) + (5 + 8 * 7 * 6 + 5) * 3) * 3 * 9
7 + (5 + 8 * 4 * (6 + 6 * 6 * 8) + (3 * 6 * 9 * 9 * 5)) * 2 + 2 + 8 * 6
3 * 4 + 7 * 7 + 6 * (8 + 6)
9 * (3 + 3) * 5
5 + 8 + 8 * 7 + 7 + (5 + (6 * 5 * 8 * 3 + 6 + 3) * 6 + 3 * 9 + 2)
((4 + 9) * 4 + 3 + 6 * 4 + (9 * 9 + 4)) * 4 * 7 * 9 + 8
(3 + (7 + 4 * 9) * 9 + (2 * 7 + 2 * 8 * 3 + 7)) * 5 + ((5 + 7 * 8 * 5 * 4 * 5) * 3 * 3 + 4 * 6 + 2)
2 * 6 * (8 * 3 + 6 + 3 + (2 + 5) + (2 * 3)) + 6 * 4
(4 + (2 * 8) + 8 + 9) * ((8 * 6 + 5) * 8 + 6 + 9 * 8 * 8) + 6 * (6 + 8 + 7 * 6 * 3) * 3
(7 + 2 * 5 * 6 * 9) * 6 + 9 + 3 + 5 + 8
5 + 2 + (2 + (4 + 2) * (3 * 6 * 2 * 4 * 9 + 7) * 6) * 5 + 4
9 * 9 + 3 + 2 * (8 + 7) + ((4 + 3 + 2) + 4 * (5 + 4 * 7 * 9) * (5 * 3) * 8 * 4)
(4 * 7 * 4 + 6) * 3 * 9 * 9 * 2
(4 + 2 + 6 + (9 + 8 + 5 + 8)) + 2 * 9 * 9
3 * (6 * (4 + 4 * 8 * 3)) * ((7 + 9 * 2) * 6 * 5)
3 * 4 + 9
(4 + 3 + 3 * 6) + 2 + (3 * 7) * 2 * (5 + (2 * 6 + 6) + 7 + 4 * 9) + (3 + (6 + 6))
8 + 4 + ((8 * 5 + 8 * 2 + 5) + 6 * 2) * 3
6 + 4 * (5 + 9 + 3 * 8 + (8 * 9 * 4 + 4 + 7) * 8)
6 + ((6 + 6 + 8 * 9 + 5) + 3 + (3 * 8 + 2 + 9 + 8) + 5 * 6 * 8)
3 * (9 + (8 * 4 * 2 * 7 + 2) * (8 + 2 + 6 + 3) + 3 + 7) * 3 + 8 * 8
6 * 2 * 6 * 9 + 5 * 6
9 * 9 + 5 * 5 + (3 + 8) + 5
(9 + 6 * 6 + 9) * 3 + (7 + 6 + 4) + 7 + 3
9 * (3 + 3 + (2 + 9 * 2 + 3) * 8 * 2 + 8) * 9
((3 + 7 * 2 * 8 * 6) * 7) + (9 * 8 * (7 * 7 * 9 + 4 + 6 * 4) + 8 + (4 + 5 * 2 * 2 + 7) * 8) * 4 + 4
(4 + 4 * 8 + 2 * (6 * 4 * 2 + 7) + 4) + 6 * 5 + 7
((9 * 2 + 7 + 8) + 3 * 7 + 2) + 3
5 * (6 + 9 + 9 + 6 + 8 * 2) * (6 * (2 * 9 + 6 + 3) + 8 * 3 * 6)
6 * 6
2 + 9 + 2 * ((9 + 3 + 5 + 6 * 8) + 8 + 7 * 6 * 9) + 9
9 + 4 * 9 * (7 + 7 + 8) + 6
8 * 6 + (3 + 2 + 3 * 4) + 5 * 8
3 + 4 * 6 * 9 + 4 * 5
5 * 6 + 7 * ((8 + 5) + 4 * (6 * 7 * 5) * 7 * (3 + 9 * 4))
9 + 2 * 5 + 7 * 4
5 + 7 * (6 + 4 + 2) * ((3 + 2) + 7 + (7 * 7 * 3 + 7) + 7 + (9 + 9 + 9) * 8)
8 + 9 * 7 + (2 + 8 + (8 * 4 + 6)) * 4
3 * (5 + 7 + (5 + 7 * 6 + 8 * 4 * 7) + (6 + 4 + 5)) * 7 + 4 * (9 * 2 + (5 * 3 + 7) * 2 * 6 * 4) + (6 + 9 * 6 + 2)
(2 * 8 * 7) + 9 + 2 * 3 + 8
((2 + 2 + 8 + 5 * 3) * 2 + 4 * 6 * 2 * 8) * (5 * 6 + (4 + 4) * 5 * 7 + 4) + (6 + (2 * 2 * 5 + 6 + 9) * 5 + 5 * (8 * 7 * 5 + 2 * 7))
((7 * 9 + 8 * 2 * 7) * 5) * 2 * 8 * 2 + ((9 + 8) + 7) * 7
3 + 3 * ((4 + 8) + (3 * 3 + 4 + 9 + 6 * 9) * 2 * 5 * 5 + 4) * 4
2 * 4 * 9 * 5 + (3 + 5) * (4 * (5 + 4 * 9 + 9 + 4 * 8) * 2 * (2 * 2 + 3 + 2 + 6) + (4 * 8) * 6)
5 + (9 + (6 + 6 * 4 * 3 * 6 * 2) + 2) * 5 * 8
7 * 7 + 7 * (4 + 5 * 9 * (9 * 2 * 4))
((4 * 3 * 6) * 5 * 4) * 6 + 3 + 2 * 6"
#puts "ng 51" if Day18.new("1 + (2 * 3) + (4 * (5 + 6))").solve != 51
#puts "ng 46" if Day18.new("2 * 3 + (4 * 5)").solve != 46
#ss = "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"
p Day18.new(s).solve
